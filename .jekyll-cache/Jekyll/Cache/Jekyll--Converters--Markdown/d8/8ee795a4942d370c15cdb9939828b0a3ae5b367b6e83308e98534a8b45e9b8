I"b<h1 id="introduction">Introduction</h1>

<h2 id="background">Background</h2>

<h3 id="the-global-state-detection-algorithm">The global-state-detection algorithm</h3>

<p>Processesdo not share clocks or memory, we need to design <code>global-state-detection</code> algorithm such that each process can form a global system state with their own recored states and states of communication channels.</p>

<p>The <code>global-state-detection</code> algorithm should has following properties:</p>

<ol>
  <li>It must run at background concurrently with, but not disturb, this underlying computation.</li>
  <li>The snapshots cannot all be taken at precisely the same instant because of synchronization problems.</li>
  <li>Snapshot must be meaningful.</li>
</ol>

<h3 id="why-is-it-important">Why is it important?</h3>

<p><code>stable property</code>: The predicate <code>y is said to be a stable property</code> of D if y(S) implies y(S‚Äô) for all global states S‚Äô of D reachable from global state S of D.</p>

<p>Serveral distributes system problems =&gt; problem of find an <code>global-state-detection</code> algorithm and process can use it to determine whether system holds a <code>stable property</code>.</p>

<p>For example,</p>

<ol>
  <li>In deadlock problem =&gt; detect a<code>stable property</code> (it can be ‚ÄúThe system is deadlocked‚Äù), and some <code>global-state-detection</code>(deadlock-detection algorithm) can detect such state, and solve the problem accordingly.</li>
  <li>For multiple phase distributed algorithms =&gt; detect a <code>stable property</code> so that one phase can be terminated and the next phase initiated, and <code>global-state-detection </code>can do that.</li>
</ol>

<h3 id="current-problems">Current problems</h3>

<p>Many <code>global-state-detection</code> algorithms (eg,. sloving deadlock problems ) are incorrect and impractical because the relationships among <code>local process states, global system states, and points in a distributed computation</code> are not well understood.</p>

<h3 id="contribution">Contribution</h3>

<ol>
  <li>Define these relationships between <code>local process states, global system states, and points in a distributed computation</code></li>
  <li>Propose an algorithm by which a process in a distributed system can determines a global state (restrict attention to the problem of detecting stable properties) of the system during computation.</li>
</ol>

<h1 id="model-of-a-distributed-system">Model of a distributed system</h1>

<p>A distributed system consists of a <code>finite set of processes</code> and a <code>finite set of channels.</code></p>

<p>A global state of a distributed system is a set of component process and channel states:</p>

<h2 id="assumption">Assumption</h2>

<ol>
  <li>Channels have infinite buffers. Error-free, Deliver msgs in order sent.</li>
  <li>Delay of message in channel is finite.</li>
</ol>

<h2 id="model">Model</h2>

<p><code>Process p</code>:  defined by a set of states.</p>

<p><code>Event e</code>: 5-tuples, &lt;p, s, s‚Äô, M, c&gt; , c and M can be null if c channels doesn‚Äôt change.</p>

<ul>
  <li>p: process where the e happens</li>
  <li>s: state before e happen</li>
  <li>s‚Äô: state after e happen</li>
  <li>c: channel state altered by e</li>
  <li>M: message sent from c.</li>
</ul>

<p><code>Global state</code>:</p>

<ul>
  <li>Initial state: each process is at initial state, and channel is empty sequence.</li>
  <li>State transimit on event e: s‚Äô = Next(s, e)</li>
</ul>

<h2 id="examples">Examples</h2>

<p><img src="imgs/image-20220128153919005.png" alt="image-20220128153919005" style="zoom:50%;" /></p>

<h1 id="the-algorithm">The algorithm</h1>

<h2 id="motivation">Motivation</h2>

<p>We cannot record the states of all processes and channels at the same instant, but we can record meaningful global system states.</p>

<p>For example, p send msg to q along c,  p =&gt; c =&gt; q</p>

<ol>
  <li>p record local state, send msg k, and record c state, k could deplicated recoreded at both p and c.</li>
  <li>p record c state, send msg k , and then record local state, k could dispear because both p and c don‚Äôt have k.</li>
</ol>

<p>Consistent global state requires:</p>

<ol>
  <li>(Number) n msg sent along c before p‚Äôs state is recorded = n‚Äô msg sent along c before c‚Äôs state is recorded.</li>
  <li>(Number) m msg received along c before q‚Äôs state is recorded = m‚Äô msg received along c before c‚Äôs state is recorded.</li>
  <li>(Number) m messages received along a channel cannot exceed the n messages sent along that channel. n &gt;= m</li>
</ol>

<h2 id="global-state-detection-algorithm">Global state detection algorithm</h2>

<p><strong>Marker-Sending Rule for a Process p.</strong></p>

<p>For each channel c, incident on, and directed away from p: p sends <code>one marker</code> along c <code>after p records its state</code> and before p sends further messages along c.</p>

<p><strong>Marker-Receiving Rule for a Process q.</strong></p>

<p>On receiving a marker along with a channel C:</p>

<pre><code class="language-shell">if (q has not recorded its state) then 
	q records its state;
  q records the state c as the empty sequence;
else:
	q records the state of c as the sequence of messages received along c after q‚Äôs state 	was recorded and before q received the marker along c.
</code></pre>

<h2 id="termination-of-the-algorithm">Termination of the Algorithm</h2>

<ol>
  <li>p record state infinite time</li>
  <li>p send the marker to q</li>
  <li>q record state infinite time</li>
</ol>

<h1 id="properties-of-the-recorded-global-state">Properties of the recorded global state</h1>

<h2 id="example">Example</h2>

<p><img src="imgs/image-20220129184614212.png" alt="image-20220129184614212" style="zoom:50%;" /></p>

<ol>
  <li>
    <p>p record state as A</p>
  </li>
  <li>
    <p>p send marker to q, and q receive at global state S3</p>
  </li>
  <li>
    <p>q receive marker and record state as D. Since q hasn‚Äôt recorded its state, q also record state of channel c‚Äôs state to be empty sequence.</p>
  </li>
  <li>
    <p>q send marker to p</p>
  </li>
  <li>
    <p>since p has recorded its state, p record state of channel c‚Äôs state to be M‚Äô</p>

    <p><img src="imgs/image-20220129185012677.png" alt="image-20220129185012677" style="zoom:50%;" /></p>
  </li>
</ol>

<p>Note this state is not the same as s1, s2, s3. So wy need it?</p>

<p>The paper shows that the global state after all prerecording events and before all postrecording events is the above global state.</p>

<p><img src="https://github.com/NLGithubWP/tech-notebook/raw/master/img/a_img_store/image-20220129195930582.png" alt="image-20220129195930582" /></p>

<p>The above state is exactly after eo‚Äô and before e1‚Äô.</p>

<h1 id="stability-detection">Stability detection</h1>

<p><img src="https://github.com/NLGithubWP/tech-notebook/raw/master/img/a_img_store/image-20220129194805388.png" alt="image-20220129194805388" /></p>
:ET