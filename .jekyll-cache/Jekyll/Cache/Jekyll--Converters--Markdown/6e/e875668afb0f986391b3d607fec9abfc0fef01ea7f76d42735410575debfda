I"Ì<h1 id="introduction">Introduction</h1>

<h2 id="contribution">Contribution</h2>

<ol>
  <li>It hides the details of resource management and failure handing,  so users can focus on application developement.</li>
  <li>High relability and availability.</li>
  <li>Supports workloads across <strong>tens of thousands of machines</strong> effectivel.</li>
</ol>

<h1 id="user-perspective">User perspective</h1>

<h2 id="workload">Workload</h2>

<ol>
  <li>Production job: Long-running services which handle <strong>short-lived latency-sensitive</strong> requests.</li>
  <li>Non-production job: Batch jobs that take from a few seconds to a few days to complete.</li>
</ol>

<h2 id="cluster-and-cells">Cluster and cells</h2>

<p>On cluster has many cells, and one cell has many machines, eg, median cell size = 10k machines.</p>

<p>All machines inside each cell are heterogeneous in many dimensions, CPU, RAM, DISK, NETWORK.</p>

<p>The Borg isolates users from</p>

<ol>
  <li>determining which machine inside a cell should run a task.</li>
  <li>allocating resources.</li>
  <li>installing dependencies.</li>
  <li>monittoring their health, and restarting if they fail.</li>
</ol>

<h2 id="job--tasks">Job &amp; tasks</h2>

<p>Eeach job includes many tasks.</p>

<p>Each job will run in just on cell. While each task are mapped into a set of Linux processes.</p>

<p>Each job can have soft / hard schedule requirements. While each task can overwritten job‚Äôs requirement.</p>

<p>Task can be updated by pushing a new configuraiton. And task could act as following:</p>

<ol>
  <li>restart</li>
  <li>no longer fit to current machine, and it will be rescheduled.</li>
  <li>update in-place.</li>
</ol>

<h2 id="allocs">Allocs</h2>

<p>It is a <strong>reserved</strong> set of resources on a machine in which one or more tasks can be run. It can used to do the following</p>

<ol>
  <li>Set resources for future tasks</li>
  <li>Retain resources between stopping a task and starting it again.</li>
  <li>gather tasks from mulitple jobs into same machine.</li>
</ol>

<p>A allocs set can be reserved on multiple machines, and one or many jobs can submitted to run in it.</p>

<h2 id="priority-quoat-admission-control">Priority, quoat, admission control</h2>

<p>Each job has a priority. High priority job can preempts low-priority job;s resources.</p>

<p>Each user has a quota, which is maximum amount of resurces a job can ask for at a given time. Quota-checking is part of admission control, and if job with insufficnent quota will be reject immediately.</p>

<p>The use of quota reduces the need for policies like Dominant Resource Fairness (DRF)</p>

<p>Borg can assign admin privileges to some user.</p>

<h2 id="naming-and-monitoring">Naming and monitoring</h2>

<p>To enable service finding, Borg create a stable <strong>‚ÄúBorg name service‚Äù (BNS) name</strong> for each task that includes the cell name, job name, and task number. And then the task name and port will be written into Chubby. PRC system can find the task endpoint by using the name.</p>

<p>Brog also records job size and task health information into chubby, so load balancers can see where to route request to.</p>

<p>Each task under Borg contains a built-in HTTP server which publishes the information about health, performnace metrics. Borg will help to monitor it and restarts failed tasks.</p>

<p>Borg recors all job information and task events in Infrastore, Infrastore, a scalable read-only data store with an interactive SQL-like interface via Dremel. Those data are used for usage-based charging, debugging job and system failures, and long-term capacity planning</p>

<h1 id="borg-architecture">Borg Architecture.</h1>

<p><img src="https://github.com/NLGithubWP/tech-notebook/raw/master/img/a_img_store/image-20220526213847814.png" alt="image-20220526213847814" /></p>

<h2 id="borgmaster">Borgmaster</h2>

<p>keep state of cells, replicate them with Paxos. Offer checkpoint, Interactive with users.</p>

<h2 id="scheduler">Scheduler</h2>

<p>Schedule from high to low priority and schedule if there are sufficient available resources. It has two parts</p>

<ol>
  <li>Feasibility checking: find machines on which task should run.</li>
  <li>Scoring, which picks one of the feasible machines. It takes into account user-specified preferences, but is mostly driven by built-in criteria such as
    <ul>
      <li>minimizing the number and priority of preempted tasks,</li>
      <li>picking machines that already have a copy of the task‚Äôs packages,</li>
      <li>spreading tasks across power and failure domains,</li>
      <li>packing quality including putting a mix of high and low priority tasks onto a single machine to allow the high-priority ones to expand in a load spike.</li>
    </ul>
  </li>
</ol>

<p>Some options for scoring:</p>

<ol>
  <li>E-PVM: Minimizes the cost when placing a task.</li>
  <li>Best-fit: fill machines as tightly as possible. It leaves some machines empty of user jobs.</li>
</ol>

<p>Scheduler can be a process, and it acts as following</p>

<ol>
  <li>retrieves state changes from master,</li>
  <li>update local copty</li>
  <li>scheduling pass to assign tasks.</li>
  <li>infrom master of the assignments</li>
</ol>

<h2 id="borglet">Borglet</h2>

<ol>
  <li>It starts and stops tasks, restarts them if they fail.</li>
  <li>Manages local resource by manipulating OS kernel Settings.</li>
  <li>Reports logs to master, etc.</li>
</ol>

<p>Borgmaster polls each Borglet every few seconds to retrieve states.</p>

<p>Borgmaster will update local cell‚Äôs state after receiving Borglet‚Äôs reply. For performance scalability, each master <strong>replica</strong> runs a <strong>stateless link shard</strong> to handle the communication with some of the Borglets. And the partitioning is recalculated whenever a Borgmaster election occurs.</p>

<h2 id="scalability">Scalability</h2>

<p>A single Borgmaster can manage many thousands of machines in a cell, and several cells have arrival rates above 10 000 tasks per minute. A busy Borgmaster uses 10‚Äì14 CPU cores and up to 50 GiB RAM.</p>

<p>In order to achieve better scalability:</p>

<ol>
  <li><strong>Run scheduler into a separate process</strong> so it could operate in parallel with the other Borgmaster functions that are replicated for failure tolerance.</li>
  <li><strong>Scheduler has copys</strong> which operate on one copy of cell state ( read from master ).</li>
  <li>Add seperate threads to <strong>master</strong> to talk to Borglets and respond to read-pnly PRCs</li>
  <li><strong>Score caching:</strong> Evaluaton feasibility and scoring for each task is expensive. So it caches the scores until task change.</li>
  <li><strong>Equivalence classes</strong>:  Borg only does feasibility and scoring for one task per equivalence class ‚Äì a group of tasks with identical requirements.</li>
  <li><strong>Relaxed randomization</strong>: It is wasteful to calculate feasibility and scores for all the machines in a large cell, scheduler examines machines in a random order until it has found ‚Äúenough‚Äù feasible machines to score, and then selects the best within that set.</li>
</ol>

<p>Scheduling a cell‚Äôs entire workload from scratch typically took a few hundred seconds, but did not finish after more than 3 days when the above techniques were disabled.</p>

<h2 id="availability">Availability</h2>

:ET