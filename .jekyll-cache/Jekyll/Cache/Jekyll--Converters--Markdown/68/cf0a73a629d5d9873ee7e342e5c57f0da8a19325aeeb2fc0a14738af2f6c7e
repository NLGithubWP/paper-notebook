I"|A<p>Linked-list related</p>

<pre><code class="language-go">type ListNode struct {
      Val int
      Next *ListNode
	  
}
</code></pre>

<h1 id="1medium-find-the-duplicate-number">1[Medium]. <a href="https://leetcode-cn.com/problems/find-the-duplicate-number/">Find the Duplicate Number</a></h1>

<pre><code class="language-go">// 主要是把list和链表关联起来，首先有索引和值的关系，其次把值也当作索引
// 3,1,3,4,2 可以看作 以下对应关系
// 0 -&gt; 3
// 1 -&gt; 1 
// 2 -&gt; 3
// 3 -&gt; 4
// 4 -&gt; 2， 进而绘制成环
func findDuplicate(nums []int) int {
	slow := 0
	fast := 0
	for {
		slow = nums[slow]
		fast = nums[nums[fast]]
		fmt.Println(slow, fast)
		if  slow == fast {
			break
		}
	}
	// meet
	slow = 0
	for{
		slow = nums[slow]
		fast = nums[fast]
		fmt.Println(slow, fast)
		if  slow == fast {
			return slow
		}
	}
}
</code></pre>

<h1 id="2easy-remove-duplicates-from-sorted-list">2[Easy]. <a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">Remove Duplicates from Sorted List</a></h1>

<pre><code class="language-go">func deleteDuplicates(head *ListNode) *ListNode {
    if head == nil{
        return head
    }
	slow := head
	fast := head.Next
	
  // use slow.next to make sure last pair is checked. 
	for slow.Next!=nil{
		if slow.Val != fast.Val{
			fast = fast.Next
			slow = slow.Next
		}else{
			fast = fast.Next
			slow.Next = fast
		}
	}
	return head
}

</code></pre>

<h1 id="3medium-remove-duplicates-from-sorted-list-ii">3[Medium]. <a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/">Remove Duplicates from Sorted List II</a></h1>

<pre><code class="language-go">func deleteDuplicates(head *ListNode) *ListNode {

	if head == nil{
		return head
	}
	// 设置假点和slow点
	slow := &amp;ListNode{-1, head}
	dummy := slow
	fast := head
	// 记录重复的值
	var dup *ListNode
	for fast.Next!=nil{
		// 如果和重复值相等，跳过
		if dup !=nil &amp;&amp; fast.Val == dup.Val{
			fast = fast.Next
			continue
		}
		// 更新重复值
		if fast.Val == fast.Next.Val{
			dup = fast
		}else{
			slow.Next = fast
			slow = fast
			fast = fast.Next
		}
	}
	// check the last value
	if dup !=nil &amp;&amp; fast.Val == dup.Val{
		slow.Next = nil
	}else{
		slow.Next = fast
	}
	return dummy.Next
}
</code></pre>

<h1 id="4easyreverse-linked-list">4[Easy].<a href="https://leetcode-cn.com/problems/reverse-linked-list/">Reverse Linked List</a></h1>

<pre><code class="language-go">func reverseList(head *ListNode) *ListNode {
	var dummy *ListNode = nil
	
	slow := dummy
	fast := head
	
	for fast!=nil{
		
		node := fast.Next
		fast.Next = slow
		slow = fast
		fast = node
	}
	return slow
}
</code></pre>

<h1 id="5mediumreverse-linked-list-ii">5[Medium].<a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">Reverse Linked List II</a></h1>

<pre><code class="language-go">
func reverseBetween(head *ListNode, left int, right int) *ListNode {

	// 假点，位于head之前
	var node = &amp;ListNode{-1, head}
	res := node
	// 遍历假点，知道index等于left
	index := 0
	for index+1 &lt; left{
		node = node.Next
		index++
	}
	// 反转后面的前N位，然后和当前假点相连
	if head.Next!=nil{
		node.Next = reverseFistN(node.Next, right-left+1)
	}
	return res.Next
}

func reverseFistN(fast *ListNode, n int) *ListNode{
	var slow *ListNode = nil
	//记录首位
	head := fast
	// 反转前N位， 
	index := 1
	for fast!=nil &amp;&amp; index &lt;= n{
		node := fast.Next
		fast.Next = slow
		slow = fast
		fast = node
		index ++
	}
	// 首位和n+1位相连
	head.Next = fast
	return slow
}
</code></pre>

<h1 id="6hardreverse-nodes-in-k-group">6[Hard].<a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/">Reverse Nodes in k-Group</a></h1>

<pre><code class="language-go">func reverseKGroup(head *ListNode, k int) *ListNode{
	pre := &amp;ListNode{0, head}
	res := pre
	
	for head != nil{
    // 确定尾部，从0开始遍历
		tail := pre
		for i:=0; i &lt; k;i++{
			tail = tail.Next
			if tail == nil{return res.Next}
		}
		
		// 截断当前sub-LinkedList
		nextHead := tail.Next
		tail.Next = nil
		
		// 反转
		tail = head
		head = reverse(head)
		
		// 相连接
		pre.Next = head
		tail.Next = nextHead
		
		// 移动指针
		pre = tail
		head = nextHead
	}
	return res.Next
}

func reverse(head * ListNode) * ListNode{
	var dummy *ListNode  = nil
	slow := dummy
	fast := head
	for fast!=nil{
		node := fast.Next
		fast.Next = slow
		slow = fast
		fast = node
	}
	return slow
}

</code></pre>

<h1 id="7easymerge-two-sorted-lists">7[Easy].<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">Merge Two Sorted Lists</a></h1>

<pre><code class="language-go">func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {
	pre := &amp;ListNode{0, nil}
	res := pre
	for l1!=nil &amp;&amp; l2!=nil{
		if l1.Val &lt; l2.Val{
			pre.Next = l1
			l1 = l1.Next
		}else{
			pre.Next = l2
			l2 = l2.Next
		}
		pre = pre.Next
	}
	if l1!=nil{
		pre.Next = l1
	}
	if l2!=nil{
		pre.Next = l2
	}
	return res.Next
}
</code></pre>

<h1 id="8mediumpartition-list">8[Medium].<a href="https://leetcode-cn.com/problems/partition-list/">Partition List</a></h1>

<pre><code class="language-go">func partition(head *ListNode, x int) *ListNode {
	dummy := &amp;ListNode{}
	slow := dummy
	fast := dummy
	node := head
	var slowBegin *ListNode =nil
	var fastBegin *ListNode =nil
	// 依次构造2个不同的linked-list
	for node!=nil{
		if node.Val &lt; x{
			if slowBegin == nil{
				slowBegin=node
			}
			slow.Next = node
			slow = slow.Next
		}else{
			if fastBegin == nil{
				fastBegin=node
			}
			fast.Next = node
			fast = fast.Next
		}
		node = node.Next
	}
	// 首位相连
	slow.Next = fastBegin
	fast.Next = nil
	if slowBegin==nil{return fastBegin}else{return slowBegin}
}
</code></pre>

<h1 id="9mediumsort-list">9[Medium].<a href="https://leetcode-cn.com/problems/sort-list/">Sort List</a></h1>

<pre><code class="language-go">//sort the linked list in O(n logn) time and O(1) memory 
func sortList(head *ListNode) *ListNode {
	// 检查head情况
	if head==nil || head.Next==nil{
		return head
	}
	if head.Next.Next==nil{
		if head.Next.Val &gt; head.Val{
			return head
		}else{
			node := head.Next
			head.Next = nil
			node.Next = head
			return node
		}
	}

	// 找中点， O(n)
	index := 1
	trNode := head
	for trNode != nil{
		trNode = trNode.Next
		index++
	}
	mid := index/2

	// 根据中电均分链表
	index = 1
	trNode = head
	var left *ListNode = head
	var right *ListNode
	for trNode != nil{
		trNode = trNode.Next
		index++
		if mid == index{
			right = trNode.Next
			trNode.Next = nil
			break
		}
	}
	// 递归 对左右分别排序
	l1 := sortList(left)
	l2 := sortList(right)
	// 每次递归，返回合并后的值
	return mergeTwoLists(l1, l2)
}

func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {
	pre := &amp;ListNode{0, nil}
	res := pre
	for l1!=nil &amp;&amp; l2!=nil{
		if l1.Val &lt; l2.Val{
			pre.Next = l1
			l1 = l1.Next
		}else{
			pre.Next = l2
			l2 = l2.Next
		}
		pre = pre.Next
	}
	if l1!=nil{
		pre.Next = l1
	}
	if l2!=nil{
		pre.Next = l2
	}
	return res.Next
}
</code></pre>

<h1 id="10medium-reorder-list">10[Medium]. <a href="https://leetcode-cn.com/problems/reorder-list/">Reorder List</a></h1>

<pre><code class="language-go">
func reorderList(head *ListNode)  {
	// 中点
	length := 1
	node := head
	for node!=nil{
		node = node.Next
		length++
	}
	mid := length/2

	// partition 链表
	index := 1
	node = head
	var left *ListNode = node
	var right *ListNode
	for node!=nil{
		node = node.Next
		index++
		if index == mid{
			right = node.Next
			node.Next = nil
			break
		}
	}
	// 反转右边的
	right = reverse(right)

  // 链接起来
	var res = &amp;ListNode{0, head}
	for left!=nil &amp;&amp; right !=nil{
		res.Next = left
		left = left.Next
		res = res.Next
		res.Next = right
		right = right.Next
		res = res.Next
	}

	if left!=nil{
		res.Next = left
	}
	if right!=nil{
		res.Next = right
	}
}

func reverse(head *ListNode) *ListNode{
	var dummy *ListNode = nil
	slow := dummy
	fast := head
	for fast!=nil{
		node := fast.Next
		fast.Next = slow
		slow = fast
		fast = node
	}
	return slow
}
</code></pre>

<h1 id="11easylinked-list-cycle">11[Easy].<a href="https://leetcode-cn.com/problems/linked-list-cycle/">Linked List Cycle</a></h1>

<pre><code class="language-go">// using O(1) (i.e. constant) memory?
// 快慢指针，相遇就有环
func hasCycle(head *ListNode) bool {
	slow := head
	fast := head
	step := 0
	for fast!=nil &amp;&amp; fast.Next!=nil{
		if step &gt; 0 &amp;&amp; slow==fast{
			return true
		}
		fast = fast.Next.Next
		slow = slow.Next
		step ++ 
	}
	return false
}
</code></pre>

<h1 id="12mediumlinked-list-cycle-ii">12[Medium].<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">Linked List Cycle II</a></h1>

<pre><code class="language-go">func detectCycle(head *ListNode) *ListNode {
	if head==nil || head.Next==nil{
		return nil
	}
	slow := head
	fast := head
	step := 0
	for fast!=nil &amp;&amp; fast.Next!=nil{
		if step &gt; 0 &amp;&amp; fast==slow{
			break
		}
		slow = slow.Next
		fast = fast.Next.Next
		step ++
	}
	if fast==nil || fast.Next==nil{
		return nil
	}
	slow = head
	step = 1
	for fast!=slow{
		fast = fast.Next
		slow = slow.Next
		step ++ 
	}
	return slow
}
</code></pre>

<h1 id="13easypalindrome-linked-list">13[Easy].<a href="https://leetcode-cn.com/problems/palindrome-linked-list/">Palindrome Linked List</a></h1>

<pre><code class="language-go">func isPalindrome(head *ListNode) bool {
    if head.Next == nil || head == nil{
        return true
    }
	// find middle
	length := 1
	node := head
	for node!=nil{
		node = node.Next
		length ++
	}
	mid := length/2

	// partition
	node = head
	index := 1
	left := node
	right := &amp;ListNode{}
	for node!=nil{
		if index == mid{
			right = node.Next
			node.Next = nil
            break
		}
		node = node.Next
		index ++
	}
	// reverse right
	right = reverse(right)
	for left!=nil &amp;&amp; right!=nil{
		if left.Val!=right.Val{
			return false
		}
		left = left.Next
		right = right.Next
	}
	return true
}

func reverse(head *ListNode)*ListNode{
	var slow *ListNode = nil
	fast := head
	for fast!=nil{
		node := fast.Next
		fast.Next = slow
		slow = fast
		fast = node
	}
	return slow
}
</code></pre>

<h1 id="14mediumcopy-list-with-random-pointer">14[Medium].<a href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/">Copy List with Random Pointer</a></h1>

<pre><code class="language-go">
func copyRandomList(head *Node) *Node {

	// key: 老链的节点，value： 新链的节点
	mapper := make(map[*Node]*Node)

	// 新list的头
	copyHead := &amp;Node{}
	copyNode := copyHead

	// 先复制，并且补充好next的值
	node := head
	for node!=nil{
		newNode := &amp;Node{node.Val, nil, nil}
		copyNode.Next = newNode
		copyNode = copyNode.Next
		mapper[node] = newNode
		node = node.Next
	}
	copyNode.Next = nil
	
	// 再填充random
	node = head
	copyNode = copyHead.Next
	for node!=nil{
		copyNode.Random = mapper[node.Random]
		copyNode = copyNode.Next
		node = node.Next
	}
	return copyHead.Next
}
</code></pre>

<h1 id="15mediumdesign-linked-list">15[Medium].<a href="https://leetcode-cn.com/problems/design-linked-list/">Design Linked List</a></h1>

<pre><code class="language-go">
// 双端链表
type DLinkList struct{
	Val int
	Pre *DLinkList
	Next *DLinkList
}

func ConstructDLinkList() *DLinkList{
	a := new(DLinkList)
	return a
}

type MyLinkedList struct {
	head *DLinkList
	tail *DLinkList
	length int
}

func Constructor() MyLinkedList {
	ins := MyLinkedList{}
	ins.head = nil
	ins.tail = nil
	ins.length = 0
	return ins
}

func (this *MyLinkedList) Get(index int) int {
	if this.length &lt;= index{
		return -1
	}
	cur := this.head
	for i:=0; i&lt;index; i++{
		cur  = cur.Next
	}
	return cur.Val
}

func (this *MyLinkedList) AddAtHead(val int)  {
	if this.head == nil{
    // 如果头为空，那么意味着没初始化，尾一定为空
		this.head=&amp;DLinkList{val, nil, nil}
		this.tail = this.head
	}else{
    // 刚初始化完，头尾相等，
		if this.head == this.tail{
			this.head = &amp;DLinkList{val, nil, this.tail}
			this.tail.Pre = this.head
		}else{
    // 正常的
			newNode := &amp;DLinkList{val, nil, this.head}
			this.head.Pre = newNode
			this.head = newNode
		}
	}
	this.length++
}

func (this *MyLinkedList) AddAtTail(val int)  {

	if this.tail == nil{
		this.tail=&amp;DLinkList{val, nil, nil}
		this.head = this.tail
	}else{
		if this.head == this.tail{
			this.tail=&amp;DLinkList{val, this.head, nil}
			this.head.Next = this.tail
		}else{
			newNode := &amp;DLinkList{val, this.tail, nil}
			this.tail.Next = newNode
			this.tail = newNode
		}
	}
	this.length++

}


func (this *MyLinkedList) AddAtIndex(index int, val int)  {

	if this.length &lt; index{
		return
	}

	if this.length == index{
		this.AddAtTail(val)
		return
	}

	if index == 0{
		this.AddAtHead(val)
		return
	}

	cur := this.head

	for i:=0; i&lt;index; i++{
		cur  = cur.Next
	}

	newNode := &amp;DLinkList{val, cur.Pre, cur}
	cur.Pre.Next = newNode
	cur.Pre = newNode

	this.length++
}


func (this *MyLinkedList) DeleteAtIndex(index int)  {
	if this.length &lt;= index{
		return
	}
	cur := this.head

	for i:=0; i&lt;index; i++{
		cur  = cur.Next
	}

	if cur !=this.head &amp;&amp; cur != this.tail{
		cur.Pre.Next = cur.Next
		cur.Next.Pre = cur.Pre
	}
  // 刚初始化完，头尾相等，头尾都检查一遍，更新各自的值
	if cur == this.head{
		this.head = this.head.Next
		if this.head!=nil{
			this.head.Pre = nil
		}
	}

	if cur == this.tail{
		this.tail = this.tail.Pre
		if this.tail!=nil{
			this.tail.Next = nil
		}
	}

	this.length--

}
</code></pre>

<h1 id="16mediumodd-even-linked-list">16[Medium].<a href="https://leetcode-cn.com/problems/odd-even-linked-list/">Odd Even Linked List</a></h1>

<pre><code class="language-go">func oddEvenList(head *ListNode) *ListNode {
	if head==nil || head.Next==nil{
		return head
	}
	oddPointer := head
	oddMark := oddPointer
	evenPointer := head.Next
	evenMark := evenPointer
	
  // 必须一次遍历同时生成2个链表
	cur := head.Next.Next
	index := 3

	for cur!=nil{
		if index%2==1{
			oddPointer.Next = cur
			oddPointer = cur
		}else{
			evenPointer.Next = cur
			evenPointer = cur
		}
		cur = cur.Next
		index ++
	}
	evenPointer.Next = nil
	oddPointer.Next = evenMark
	return oddMark
}
</code></pre>

<h1 id="17mediumadd-two-numbers">17[Medium].<a href="https://leetcode-cn.com/problems/add-two-numbers/">Add Two Numbers</a></h1>

<pre><code class="language-go">func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {
	var node *ListNode = nil
	var res *ListNode = nil
	prev := 0
	for l1!=nil || l2!=nil{
		// 如果都存在
		if l1!=nil &amp;&amp; l2!=nil{
			value := (l1.Val+l2.Val+ prev)%10
			prev = (l1.Val+l2.Val+ prev)/10
			newNode := &amp;ListNode{value,nil}
			if node == nil{
				node = newNode
				res = newNode
			}else{
				node.Next = newNode
				node = node.Next
			}
			l1 = l1.Next
			l2 = l2.Next
		// 如果l1存在	
		}else if l1!=nil{
			value := (l1.Val+ prev)%10
			prev = (l1.Val+ prev)/10
			newNode := &amp;ListNode{value,nil}
			if node == nil{
				node = newNode
				res = newNode
			}else{
				node.Next = newNode
				node = node.Next
			}
			l1 = l1.Next
		// 如果l2存在
		}else{
			value := (l2.Val+ prev)%10
			prev = (l2.Val+ prev)/10
			newNode := &amp;ListNode{value,nil}
			if node == nil{
				node = newNode
				res = newNode
			}else{
				node.Next = newNode
				node = node.Next
			}
			l2 = l2.Next
		}
	}
	//如果还有进位
	if prev !=0{
		newNode := &amp;ListNode{prev,nil}
		if node == nil{
			node = newNode
			res = newNode
		}else{
			node.Next = newNode
			node = node.Next
		}
	}
	return res
}
</code></pre>

<h1 id="18mediumrotate-list">18[Medium].<a href="https://leetcode-cn.com/problems/rotate-list/">Rotate List</a></h1>

<pre><code class="language-go">func rotateRight(head *ListNode, k int) *ListNode {
	if head == nil{return head}
	// 算长度
	len := 1
	node := head
	for node.Next!=nil{
		len += 1
		node = node.Next
	}
  // 算绝对的反转次数
	k = k%len
	if k == 0{
		return head
	}
  // 记录最后一个点和第一个要反转的点的index
	lastNode := node
	indexLast := len - k
  //第二次遍历，找出要反转的点的前一个点
	node = head
	for index := 0; index+1&lt;indexLast; index++{
		node = node.Next
	}
	res := node.Next
	node.Next = nil
	lastNode.Next = head
	return res
}
</code></pre>

<h1 id="19mediumadd-two-numbers-ii">19[Medium].<a href="https://leetcode-cn.com/problems/add-two-numbers-ii/">Add Two Numbers II</a></h1>

<pre><code>
</code></pre>

:ET