I"c<h1 id="abstract">Abstract</h1>

<h2 id="background">background</h2>

<p>The SQL-based training data debugging framework has proved effective to fix logistical regression model bugs in a non-federated learning setting.</p>

<ol>
  <li>Remove the label errors from training data, such that unexpected behavior disappear in the retrained model.</li>
</ol>

<p>The paper tries to enable such a framework for federated learning</p>

<h2 id="challenge">Challenge</h2>

<p>develop a security protocol for FL debugging which is proved to be <strong>secure, efficient, and accurate.</strong></p>

<h2 id="solutions">Solutions</h2>

<ol>
  <li>FedRain is extended from Rain, the state-of-art SQL-based training data debugging framework. It falls short in terms of both efficiency and security.</li>
  <li>They propose novel SQL-based training data debugging framework called FROG, which is more secure, more accurate, and more efficient than FedRain.</li>
</ol>

<h1 id="introduction">Introduction</h1>

<h2 id="problems">Problems</h2>

<p>When a biased or inaccurate federated learning model mispredicts in a way that affects downstream analysis results, how to automatically identify the training examples that most contributed to the downstream error in a way that <strong>retains federated learningâ€™s security guarantees</strong>.</p>

<p>But in federated learning, training data errors can come from any of data sources.</p>

<h2 id="solutions-1">Solutions</h2>

<p>Identify erroneous training records that directly affect errors in the query results.</p>

<p>And then remove the subset of training data and retrain the model.</p>

<p><img src="https://github.com/NLGithubWP/tech-notebook/raw/master/img/a_img_store/image-20211222154431133.png" alt="image-20211222154431133" /></p>

<ol>
  <li>
    <p>Model Loss:</p>

    <p>It removes the training examples from highest too lowest training loss until complaint is resolved.</p>

    <p>The losss can be obtained during federated inference.</p>

    <p>The method is secure, but the model loss is independent of the complaint and it likely remove many irreleveant training records.</p>
  </li>
  <li>
    <p>Influence Function</p>

    <p>Allow instance-based complaint (expose the instance to both party. )</p>

    <p>Quickly approximates the infuence of removing each training example on the misprediction.</p>

    <p>And then iteratively ranks and removes training records until complaint is resolved.</p>

    <p>This is not secure.</p>
  </li>
  <li>
    <p>Rain</p>

    <p>Allow to expose why the prediction is not accurate and what it shoude be.</p>

    <p>Company A can directly complain that why the ratio is too high and it should be zero.</p>

    <p>Rain iteratively ranks and removes training records that most increased the ratio until the complaint is resolved. Unfortunately, Rain is not secure.</p>
  </li>
  <li>
    <p>The paper presents a secure debugging framework which provides Rain-style complaints.</p>
  </li>
</ol>

<p>FedRain needs to limit the number of stochastic gradient descent iterations to less than the number of features in order to ensure security. However, this is typically far lower than the iterations needed for logistic regression to converge. Thus, FedRain often cannot reach high model accuracy without breaking the security guarantee</p>

<h2 id="contributions">Contributions</h2>

<ol>
  <li>Enable SQL based training data debugging for FL</li>
  <li>Propose FedRain,  a security guaranteed version of Rain</li>
  <li>Porpose Frog, a novel FL debugging framework</li>
  <li>Conduct experiments. Result shows Frog is better in terms of efficiency and accuracy.</li>
</ol>

<h1 id="problem-definition">Problem definition</h1>

<p>Our goal is to identify the <strong>minimum number</strong> of training examples such that if they were removed, and the model was retrained, the updated model would lead to a new query result  that satisfes the complaint .</p>

<h1 id="background-1">Background</h1>

<h2 id="rainsql-based-training-framework">Rain:SQL-based training framework</h2>

<h3 id="overall">Overall</h3>

<p>Rain then takes the complaint as input and produces a ranked list of the training examples based on <strong>how much each training example contributes to the complaint.</strong></p>

<ol>
  <li>Generate the ranked list;</li>
  <li>Remove the top-k training examples from the ranked list;</li>
  <li>Retrain an ML model on the new training set;</li>
  <li>Set = Repeat (1)-(4) until &lt; 0.</li>
</ol>

<h3 id="main-contributition">main contributition</h3>

<ol>
  <li>How to effciently compute the <strong>effect</strong> on the query result for <strong>deleting</strong> each <strong>training</strong> <strong>example</strong>.</li>
  <li>How to make the SQL query <strong>differentiable</strong> with respect to the model parameters so that continuous optimization techniques can be applied for solving the challenge 1.</li>
</ol>

<h3 id="solutions-2">Solutions</h3>

<ol>
  <li>
    <p>convert SQL query into a formula</p>

    <p><img src="https://github.com/NLGithubWP/tech-notebook/raw/master/img/a_img_store/image-20211223114137239.png" alt="image-20211223114137239" /></p>
  </li>
  <li>
    <p>Relax into continuous variables so it become differentiable</p>

    <p><img src="https://github.com/NLGithubWP/tech-notebook/raw/master/img/a_img_store/image-20211223114204174.png" alt="image-20211223114204174" /></p>
  </li>
  <li>
    <p>Compare score for each training examples</p>
  </li>
</ol>

<p><img src="https://github.com/NLGithubWP/tech-notebook/raw/master/img/a_img_store/image-20211223114336148.png" alt="image-20211223114336148" /></p>

<h1 id="fedrain-federated-rain">FedRain: Federated Rain</h1>

:ET